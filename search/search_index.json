{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the BitterBuster Documentation Website! BitterBuster is a Fall 2022 Project developed by Team HAI for the CMU MET program in collaboration with CMU Psychology Department. Team Members Constanza Tong, Yuan Tan, Ruizi Wang, Angela Zhang Attribution All related assets to this project fall under the CC BY-NC-SA 4.0 License All future derivations of this work should contain attribution to the members listed above.","title":"Home"},{"location":"#welcome-to-the-bitterbuster-documentation-website","text":"BitterBuster is a Fall 2022 Project developed by Team HAI for the CMU MET program in collaboration with CMU Psychology Department. Team Members Constanza Tong, Yuan Tan, Ruizi Wang, Angela Zhang Attribution All related assets to this project fall under the CC BY-NC-SA 4.0 License All future derivations of this work should contain attribution to the members listed above.","title":"Welcome to the BitterBuster Documentation Website!"},{"location":"license/","text":"BitterBuster Licensing All of BitterBuster and related delivered source code falls under the CC BY-NC-SA 4.0 license described below. Additional licensing on sound and art assets packaged with the BitterBuster game and Candy Generator are included with the respective projects. Creative Commons Creative Commons Corporation (\u201cCreative Commons\u201d) is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an \u201cas-is\u201d basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible. Using Creative Commons Public Licenses Creative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses. Considerations for licensors: Our public licenses are intended for use by those authorized to give the public permission to use material in ways otherwise restricted by copyright and certain other rights. Our licenses are irrevocable. Licensors should read and understand the terms and conditions of the license they choose before applying it. Licensors should also secure all rights necessary before applying our licenses so that the public can reuse the material as expected. Licensors should clearly mark any material not subject to the license. This includes other CC-licensed material, or material used under an exception or limitation to copyright. More considerations for licensors . Considerations for the public: By using one of our public licenses, a licensor grants the public permission to use the licensed material under specified terms and conditions. If the licensor\u2019s permission is not necessary for any reason\u2013for example, because of any applicable exception or limitation to copyright\u2013then that use is not regulated by the license. Our licenses grant only permissions under copyright and certain other rights that a licensor has authority to grant. Use of the licensed material may still be restricted for other reasons, including because others have copyright or other rights in the material. A licensor may make special requests, such as asking that all changes be marked or described. Although not required by our licenses, you are encouraged to respect those requests where reasonable. More considerations for the public . Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Public License By exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Public License (\"Public License\"). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions. Section 1 \u2013 Definitions. a. Adapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image. b. Adapter's License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License. c. BY-NC-SA Compatible License means a license listed at creativecommons.org/compatiblelicenses , approved by Creative Commons as essentially the equivalent of this Public License. d. Copyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights. e. Effective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements. f. Exceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material. g. License Elements means the license attributes listed in the name of a Creative Commons Public License. The License Elements of this Public License are Attribution, NonCommercial, and ShareAlike. h. Licensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License. i. Licensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license. j. Licensor means the individual(s) or entity(ies) granting rights under this Public License. k. NonCommercial means not primarily intended for or directed towards commercial advantage or monetary compensation. For purposes of this Public License, the exchange of the Licensed Material for other material subject to Copyright and Similar Rights by digital file-sharing or similar means is NonCommercial provided there is no payment of monetary compensation in connection with the exchange. l. Share means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them. m. Sui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world. n. You means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning. Section 2 \u2013 Scope. a. License grant. Subject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to: A. reproduce and Share the Licensed Material, in whole or in part, for NonCommercial purposes only; and B. produce, reproduce, and Share Adapted Material for NonCommercial purposes only. Exceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions. Term. The term of this Public License is specified in Section 6(a). Media and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)(4) never produces Adapted Material. Downstream recipients. A. __Offer from the Licensor \u2013 Licensed Material.__ Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License. B. __Additional offer from the Licensor \u2013 Adapted Material.__ Every recipient of Adapted Material from You automatically receives an offer from the Licensor to exercise the Licensed Rights in the Adapted Material under the conditions of the Adapter\u2019s License You apply. C. __No downstream restrictions.__ You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material. No endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i). b. Other rights. Moral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise. Patent and trademark rights are not licensed under this Public License. To the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties, including when the Licensed Material is used other than for NonCommercial purposes. Section 3 \u2013 License Conditions. Your exercise of the Licensed Rights is expressly made subject to the following conditions. a. Attribution. If You Share the Licensed Material (including in modified form), You must: A. retain the following if it is supplied by the Licensor with the Licensed Material: i. identification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated); ii. a copyright notice; iii. a notice that refers to this Public License; iv. a notice that refers to the disclaimer of warranties; v. a URI or hyperlink to the Licensed Material to the extent reasonably practicable; B. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and C. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License. You may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information. If requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable. b. ShareAlike. In addition to the conditions in Section 3(a), if You Share Adapted Material You produce, the following conditions also apply. The Adapter\u2019s License You apply must be a Creative Commons license with the same License Elements, this version or later, or a BY-NC-SA Compatible License. You must include the text of, or the URI or hyperlink to, the Adapter's License You apply. You may satisfy this condition in any reasonable manner based on the medium, means, and context in which You Share Adapted Material. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, Adapted Material that restrict exercise of the rights granted under the Adapter's License You apply. Section 4 \u2013 Sui Generis Database Rights. Where the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material: a. for the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database for NonCommercial purposes only; b. if You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material, including for purposes of Section 3(b); and c. You must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database. For the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights. Section 5 \u2013 Disclaimer of Warranties and Limitation of Liability. a. Unless otherwise separately undertaken by the Licensor, to the extent possible, the Licensor offers the Licensed Material as-is and as-available, and makes no representations or warranties of any kind concerning the Licensed Material, whether express, implied, statutory, or other. This includes, without limitation, warranties of title, merchantability, fitness for a particular purpose, non-infringement, absence of latent or other defects, accuracy, or the presence or absence of errors, whether or not known or discoverable. Where disclaimers of warranties are not allowed in full or in part, this disclaimer may not apply to You. b. To the extent possible, in no event will the Licensor be liable to You on any legal theory (including, without limitation, negligence) or otherwise for any direct, special, indirect, incidental, consequential, punitive, exemplary, or other losses, costs, expenses, or damages arising out of this Public License or use of the Licensed Material, even if the Licensor has been advised of the possibility of such losses, costs, expenses, or damages. Where a limitation of liability is not allowed in full or in part, this limitation may not apply to You. c. The disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability. Section 6 \u2013 Term and Termination. a. This Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically. b. Where Your right to use the Licensed Material has terminated under Section 6(a), it reinstates: automatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or upon express reinstatement by the Licensor. For the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License. c. For the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License. d. Sections 1, 5, 6, 7, and 8 survive termination of this Public License. Section 7 \u2013 Other Terms and Conditions. a. The Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed. b. Any arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License. Section 8 \u2013 Interpretation. a. For the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License. b. To the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions. c. No term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor. d. Nothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority. Creative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the \u201cLicensor.\u201d Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies , Creative Commons does not authorize the use of the trademark \u201cCreative Commons\u201d or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses. Creative Commons may be contacted at creativecommons.org","title":"License"},{"location":"license/#bitterbuster-licensing","text":"All of BitterBuster and related delivered source code falls under the CC BY-NC-SA 4.0 license described below. Additional licensing on sound and art assets packaged with the BitterBuster game and Candy Generator are included with the respective projects.","title":"BitterBuster Licensing"},{"location":"license/#creative-commons","text":"Creative Commons Corporation (\u201cCreative Commons\u201d) is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an \u201cas-is\u201d basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible. Using Creative Commons Public Licenses Creative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses. Considerations for licensors: Our public licenses are intended for use by those authorized to give the public permission to use material in ways otherwise restricted by copyright and certain other rights. Our licenses are irrevocable. Licensors should read and understand the terms and conditions of the license they choose before applying it. Licensors should also secure all rights necessary before applying our licenses so that the public can reuse the material as expected. Licensors should clearly mark any material not subject to the license. This includes other CC-licensed material, or material used under an exception or limitation to copyright. More considerations for licensors . Considerations for the public: By using one of our public licenses, a licensor grants the public permission to use the licensed material under specified terms and conditions. If the licensor\u2019s permission is not necessary for any reason\u2013for example, because of any applicable exception or limitation to copyright\u2013then that use is not regulated by the license. Our licenses grant only permissions under copyright and certain other rights that a licensor has authority to grant. Use of the licensed material may still be restricted for other reasons, including because others have copyright or other rights in the material. A licensor may make special requests, such as asking that all changes be marked or described. Although not required by our licenses, you are encouraged to respect those requests where reasonable. More considerations for the public .","title":"Creative Commons"},{"location":"license/#creative-commons-attribution-noncommercial-sharealike-40-international-public-license","text":"By exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Public License (\"Public License\"). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.","title":"Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Public License"},{"location":"license/#section-1-definitions","text":"a. Adapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image. b. Adapter's License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License. c. BY-NC-SA Compatible License means a license listed at creativecommons.org/compatiblelicenses , approved by Creative Commons as essentially the equivalent of this Public License. d. Copyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights. e. Effective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements. f. Exceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material. g. License Elements means the license attributes listed in the name of a Creative Commons Public License. The License Elements of this Public License are Attribution, NonCommercial, and ShareAlike. h. Licensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License. i. Licensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license. j. Licensor means the individual(s) or entity(ies) granting rights under this Public License. k. NonCommercial means not primarily intended for or directed towards commercial advantage or monetary compensation. For purposes of this Public License, the exchange of the Licensed Material for other material subject to Copyright and Similar Rights by digital file-sharing or similar means is NonCommercial provided there is no payment of monetary compensation in connection with the exchange. l. Share means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them. m. Sui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world. n. You means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.","title":"Section 1 \u2013 Definitions."},{"location":"license/#section-2-scope","text":"a. License grant. Subject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to: A. reproduce and Share the Licensed Material, in whole or in part, for NonCommercial purposes only; and B. produce, reproduce, and Share Adapted Material for NonCommercial purposes only. Exceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions. Term. The term of this Public License is specified in Section 6(a). Media and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)(4) never produces Adapted Material. Downstream recipients. A. __Offer from the Licensor \u2013 Licensed Material.__ Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License. B. __Additional offer from the Licensor \u2013 Adapted Material.__ Every recipient of Adapted Material from You automatically receives an offer from the Licensor to exercise the Licensed Rights in the Adapted Material under the conditions of the Adapter\u2019s License You apply. C. __No downstream restrictions.__ You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material. No endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i). b. Other rights. Moral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise. Patent and trademark rights are not licensed under this Public License. To the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties, including when the Licensed Material is used other than for NonCommercial purposes.","title":"Section 2 \u2013 Scope."},{"location":"license/#section-3-license-conditions","text":"Your exercise of the Licensed Rights is expressly made subject to the following conditions. a. Attribution. If You Share the Licensed Material (including in modified form), You must: A. retain the following if it is supplied by the Licensor with the Licensed Material: i. identification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated); ii. a copyright notice; iii. a notice that refers to this Public License; iv. a notice that refers to the disclaimer of warranties; v. a URI or hyperlink to the Licensed Material to the extent reasonably practicable; B. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and C. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License. You may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information. If requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable. b. ShareAlike. In addition to the conditions in Section 3(a), if You Share Adapted Material You produce, the following conditions also apply. The Adapter\u2019s License You apply must be a Creative Commons license with the same License Elements, this version or later, or a BY-NC-SA Compatible License. You must include the text of, or the URI or hyperlink to, the Adapter's License You apply. You may satisfy this condition in any reasonable manner based on the medium, means, and context in which You Share Adapted Material. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, Adapted Material that restrict exercise of the rights granted under the Adapter's License You apply.","title":"Section 3 \u2013 License Conditions."},{"location":"license/#section-4-sui-generis-database-rights","text":"Where the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material: a. for the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database for NonCommercial purposes only; b. if You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material, including for purposes of Section 3(b); and c. You must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database. For the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.","title":"Section 4 \u2013 Sui Generis Database Rights."},{"location":"license/#section-5-disclaimer-of-warranties-and-limitation-of-liability","text":"a. Unless otherwise separately undertaken by the Licensor, to the extent possible, the Licensor offers the Licensed Material as-is and as-available, and makes no representations or warranties of any kind concerning the Licensed Material, whether express, implied, statutory, or other. This includes, without limitation, warranties of title, merchantability, fitness for a particular purpose, non-infringement, absence of latent or other defects, accuracy, or the presence or absence of errors, whether or not known or discoverable. Where disclaimers of warranties are not allowed in full or in part, this disclaimer may not apply to You. b. To the extent possible, in no event will the Licensor be liable to You on any legal theory (including, without limitation, negligence) or otherwise for any direct, special, indirect, incidental, consequential, punitive, exemplary, or other losses, costs, expenses, or damages arising out of this Public License or use of the Licensed Material, even if the Licensor has been advised of the possibility of such losses, costs, expenses, or damages. Where a limitation of liability is not allowed in full or in part, this limitation may not apply to You. c. The disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.","title":"Section 5 \u2013 Disclaimer of Warranties and Limitation of Liability."},{"location":"license/#section-6-term-and-termination","text":"a. This Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically. b. Where Your right to use the Licensed Material has terminated under Section 6(a), it reinstates: automatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or upon express reinstatement by the Licensor. For the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License. c. For the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License. d. Sections 1, 5, 6, 7, and 8 survive termination of this Public License.","title":"Section 6 \u2013 Term and Termination."},{"location":"license/#section-7-other-terms-and-conditions","text":"a. The Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed. b. Any arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.","title":"Section 7 \u2013 Other Terms and Conditions."},{"location":"license/#section-8-interpretation","text":"a. For the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License. b. To the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions. c. No term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor. d. Nothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority. Creative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the \u201cLicensor.\u201d Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies , Creative Commons does not authorize the use of the trademark \u201cCreative Commons\u201d or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses. Creative Commons may be contacted at creativecommons.org","title":"Section 8 \u2013 Interpretation."},{"location":"bitterbuster/build/","text":"BitterBuster Building Overview This document provides the details on how to make a build for BitterBuster. Building Click on File -> Build Settings to open the Build Settings window Select the desired platform for building (WebGL, Windows, Linux, Mac). If development logging is needed, check the \"Development Build\" box Click on \"Build\". This will open a window to select a folder to output the build, then start the build Hosting a Web Build For testing, the HAI team used itch.io to host easily shareable web builds. Below are instructions on how to set up your own test builds. Make a WebGL build in Unity and ZIP together all the files in the output build folder Log in or register for an account on itch.io Go to the new project page Fill in fields for project name, description, etc. For \"Kind of project\", select HTML Under \"Uploads\", click on \"Upload files\" and select the zip file from step 1. You can also upload other builds (Windows, Linux) for easy sharing You can alter the viewport dimensions, but as the game runs on 16:9 aspect ratio, we have often tested with 1280x720px At the bottom of the page, you are able to set privacy restrictions on the build. Generally, we select \"Restricted\" and check the \"Also allow a password to view page\" Once everything is set up, click on the \"Save & view page\" button at the bottom of the page","title":"Build"},{"location":"bitterbuster/build/#bitterbuster-building","text":"","title":"BitterBuster Building"},{"location":"bitterbuster/build/#overview","text":"This document provides the details on how to make a build for BitterBuster.","title":"Overview"},{"location":"bitterbuster/build/#building","text":"Click on File -> Build Settings to open the Build Settings window Select the desired platform for building (WebGL, Windows, Linux, Mac). If development logging is needed, check the \"Development Build\" box Click on \"Build\". This will open a window to select a folder to output the build, then start the build","title":"Building"},{"location":"bitterbuster/build/#hosting-a-web-build","text":"For testing, the HAI team used itch.io to host easily shareable web builds. Below are instructions on how to set up your own test builds. Make a WebGL build in Unity and ZIP together all the files in the output build folder Log in or register for an account on itch.io Go to the new project page Fill in fields for project name, description, etc. For \"Kind of project\", select HTML Under \"Uploads\", click on \"Upload files\" and select the zip file from step 1. You can also upload other builds (Windows, Linux) for easy sharing You can alter the viewport dimensions, but as the game runs on 16:9 aspect ratio, we have often tested with 1280x720px At the bottom of the page, you are able to set privacy restrictions on the build. Generally, we select \"Restricted\" and check the \"Also allow a password to view page\" Once everything is set up, click on the \"Save & view page\" button at the bottom of the page","title":"Hosting a Web Build"},{"location":"bitterbuster/future/","text":"BitterBuster Future Development Overview This document provides a list of current limitations and potential steps for future development. Future Development AI Communication We were able to explore different methods of communication with Python-based agents, but were not able to fully implement the communication framework. Our idea for the game flow was that an Explorer/Selector would be able to join the room, then toggle themselves for being a human or AI agent; if an AI agent was selected, then once the game starts, it would periodically output observations and wait to receive actions from the agent. So, the agent would be running locally on the player machine that joins the room. As a summary of our progress: Create a serialization function for all main objects in the game in the Controller classes, along with a global function in GameManager demonstrating how to compile all the data together and export into a json file Create a function to capture screenshots in CameraController and export them into png Create a function that exports an array of actions that can be taken by the Explorer/Selector A sample of one potential way this can be done for the Explorer is found here Connect Unity with Python Send observation data in an efficient way that does not lag the game Receive action input from Python Apply the action input to the Explorer/Selector controllers in the game Create a button on the pre-game screen that allows a player to toggle between being human/AI In our most-completed demo (conducted on this branch ), we had successfully connected Unity to a Python server via C#-based TCP socket communication. We wrote a very simple Python script to take (and scrap) the observational input and return a random action based on the action array received. However, native C# solutions seemed to have conflicts with Unity and caused the game to lag (and eventually crash). One of the paths that seemed promising was using an external library that would handle the communication, such as this one . Additional Game Features Some of the final changes we were not able to complete within the project semester: When a house is visited, adjusting the mailbox mesh to be flag-down along with the current color change A game over screen to be displayed to the host with a quick \"replay\" button that would bring everyone back to the pre-game screen with the same gameplay settings A full-on Input Manager that would allow for remapping of keys; currently, J & K work for Selectors, but we did not add in support for left-handedness Different houses being enabled/disabled on each gameplay session for having candies Updates to the tutorial screen: Currently missing the information that different neighborhoods and houses may have different probability distributions Also did not include the J/K for Selector and arrow keys as an option for movement","title":"Future Development"},{"location":"bitterbuster/future/#bitterbuster-future-development","text":"","title":"BitterBuster Future Development"},{"location":"bitterbuster/future/#overview","text":"This document provides a list of current limitations and potential steps for future development.","title":"Overview"},{"location":"bitterbuster/future/#future-development","text":"","title":"Future Development"},{"location":"bitterbuster/future/#ai-communication","text":"We were able to explore different methods of communication with Python-based agents, but were not able to fully implement the communication framework. Our idea for the game flow was that an Explorer/Selector would be able to join the room, then toggle themselves for being a human or AI agent; if an AI agent was selected, then once the game starts, it would periodically output observations and wait to receive actions from the agent. So, the agent would be running locally on the player machine that joins the room. As a summary of our progress: Create a serialization function for all main objects in the game in the Controller classes, along with a global function in GameManager demonstrating how to compile all the data together and export into a json file Create a function to capture screenshots in CameraController and export them into png Create a function that exports an array of actions that can be taken by the Explorer/Selector A sample of one potential way this can be done for the Explorer is found here Connect Unity with Python Send observation data in an efficient way that does not lag the game Receive action input from Python Apply the action input to the Explorer/Selector controllers in the game Create a button on the pre-game screen that allows a player to toggle between being human/AI In our most-completed demo (conducted on this branch ), we had successfully connected Unity to a Python server via C#-based TCP socket communication. We wrote a very simple Python script to take (and scrap) the observational input and return a random action based on the action array received. However, native C# solutions seemed to have conflicts with Unity and caused the game to lag (and eventually crash). One of the paths that seemed promising was using an external library that would handle the communication, such as this one .","title":"AI Communication"},{"location":"bitterbuster/future/#additional-game-features","text":"Some of the final changes we were not able to complete within the project semester: When a house is visited, adjusting the mailbox mesh to be flag-down along with the current color change A game over screen to be displayed to the host with a quick \"replay\" button that would bring everyone back to the pre-game screen with the same gameplay settings A full-on Input Manager that would allow for remapping of keys; currently, J & K work for Selectors, but we did not add in support for left-handedness Different houses being enabled/disabled on each gameplay session for having candies Updates to the tutorial screen: Currently missing the information that different neighborhoods and houses may have different probability distributions Also did not include the J/K for Selector and arrow keys as an option for movement","title":"Additional Game Features"},{"location":"bitterbuster/implementation/","text":"BitterBuster Implementation Overview This document provides implementation details on BitterBuster. For further Unity documentation see their User Manual . Code Structure BitterBuster follows the standard folder structure of Unity Projects. Most edits to the game will take place in the Assets folder, which contains: Assets | - Animations # All animations + animation controllers | - Art # All art assets | - Materials # All object materials | - Photon # Photon Package | - Plugins # Other Unity Plugins | - Prefabs # All prefabs | - Presets # Editor presets | - Rendering # Rendering-related assets | - Resources # Special Resources folder | - Scenes # All game scenes | - Scripts # All C# scripts | - Sounds # All SFX + BGM sound assets | - TextMesh Pro # Text rendering package | - Textures # All textures Most of these folders contain various assets that are used within the game, such as 3D models, 2D art, and sound. The below sections will highlight some of the key folders to be familiar with. Scenes Each \"level\" within Unity is captured within a Scene . For BitterBuster, there are three main scenes: StartScreen: The first scene when a user opens the game, provides options to host, join, or quit the game. PreGame: The setup scene after a player joins or creates a room. This is where hosts update the settings of the game and players can select their role of Selector or Explorer. Game: The main game scene. This contains the entire Candy Kingdom world along with all of the components of the gameplay. To edit a particular Scene , double-click its corresponding file in this folder. Resources The Resources folder is a special folder in Unity that allows for runtime loading of assets. It contains prefabs used by Photon to create multiplayer instances of during runtime (such as the player objects), along with default Bitter/Sweet candies that are loaded at runtime as well. Scripts All of the code within the game is located in this folder. Each of the code files is also separated into more specific directories based on functionality: Scripts | - Controllers # GameObject controller scripts | - Logging # Logging-related scripts | | - LogEvents # Defined log events | - SceneManagers # Scene manager scripts | - Sound # Sound-related scripts | - UI # UI-related scripts | | - Components # Subset of scripts for specific UI components | - Util # General utility scripts Controllers Each of the scripts in this directory relate to a key GameObject used in the main game - for instance, controllers for the Explorer, for traps, for houses, etc. Each instance of this object will contain the corresponding controller script as a component, which will contain common functionalities and parameters for the object. Logging All logging-related logic is contained in this folder. This consists of the overall Logger that is used by the host along with all of the different events that the Logger will log. SceneManagers Each scene in BitterBuster has a corresponding manager class, which handles the overall logic of that given scene. The GameManager class is the most important script in this folder as it contains all of the overarching logic for the main game. This includes handling game events by broadcasting them to all machines. An additional class defined in this directory is the EventManager class, which is used in the main game to broadcast and add/remove listeners to all gameplay events. Sound This directory contains managers and related scripts for SFX and BGM used in the game. UI This directory contains managers and related scripts for all of the UI used in the game. Util This directory contains utility scripts used in the game. Some key ones to note are: - Candy.cs: Contains definitions for Candy fields and other related classes, such as a CandyLoader . - FileSelector.cs: Contains wrapper functions for a file selector plugin that allows for runtime usage of a local file selector. This is currently used to upload JSON files, candies, etc. - RoomCustomProperties.cs: Allows for access and storage of room-based properties, such as the global game settings and Explorer/Selector ID. This is used to persist values between the PreGame and the Game scenes. Multiplayer Structure For more details, Photon provides a documentation wiki describing how their many functionalities work. To start a multiplayer session , one machine must first create a room with a room code. The creater of the room is considered the MasterClient . This room code can then be used by other machines to join the same room. If the MasterClient disconnects, one of the other players will then become the MasterClient ; if there are no other players in the room, it is shut down. When using Photon with Unity, all GameObjects are instantiated locally, and all function calls will only affect the local objects. In order to make cross-machine calls, we use Remote Procedure Calls (RPCs) . This will be what we make use of throughout the game to synchronize core game events between the different machines. General Game Flow The following sections provide a general overview of what happens behind-the-scenes in a given play session. Start Scene On the start screen, a player can select whether they would like to host or join the game. In clicking the button, the game will prompt them for a game code, then create or join the room respectively depending on which option they pick. Here, a host status is determined by setting the playerType field of the Player class to be Host . This value persists onto future scenes. From Photon's perspective, this host is also the MasterClient . PreGame Scene Once a host has created a game, they are led to the pre-game screen: Here, they can also access the settings for the game: The host can then use this screen to upload any gameplay settings through the JSON configuration file. This value is stored using Photon's support for room-based custom properties, of which the main functions are wrapped in the RoomCustomProperties class. From a player perspective who has joined the room, they can select their role on the pre-game screen: This updates the playerType in the Player class to whichever they select, along with storing the user ID within the RoomCustomProperties class. Both values will persist into the main game scene; the former will be used for most of the gameplay, and the latter is used to ensure exclusivity of role selection (i.e. making sure we don't let both players choose the same role) and to handle player disconnects. Once two players have joined and selected their roles, the host can click a button to start the game. Main Game Initialization Upon entering the game, there are a number of items that are immediately processed behind the scenes. Firstly, in using the playerType field, many objects will initialize/destory themselves based on what the local player's role is. For instance, the Selector will only see the Selector UI; houses will only initialize their own mailbox colors on the Explorer side; only the Host will be able to toggle between the two cameras; and so on. The Host also will do some additional setup, such as loading the Candies. Because Candy images are only configurable on the Host side, only the Host will upload and store the images, and most future communication about Candies will be through passing their corresponding ID numbers around; only when the Candy really needs to be displayed (i.e. for the Selector's selection process) will the actual image bytes be passed along. The two players are presented with their respective onboarding screens (which will differ depending on the player's roles), and then can start the game together. Main Loop Afterwards, the two players enter the main gameplay loop. Some aspects, such as the Explorer's position and rotation, are values that are automatically synced by Photon. Otherwise, the general gameplay loop will result in the following: Player performs an action (visits a house, clicks a button), which causes some local changes Action communicates with the GameManager through making a call GameManager.Instance.Broadcast...(...) The GameManager function will call a corresponding RPC function on each machine The RPC function will locally broadcast the GameEvent Any listeners to the broadcasted event will respond accordingly This continues until time runs out and a game over state is triggered in the GameManager .","title":"Implementation Details"},{"location":"bitterbuster/implementation/#bitterbuster-implementation","text":"","title":"BitterBuster Implementation"},{"location":"bitterbuster/implementation/#overview","text":"This document provides implementation details on BitterBuster. For further Unity documentation see their User Manual .","title":"Overview"},{"location":"bitterbuster/implementation/#code-structure","text":"BitterBuster follows the standard folder structure of Unity Projects. Most edits to the game will take place in the Assets folder, which contains: Assets | - Animations # All animations + animation controllers | - Art # All art assets | - Materials # All object materials | - Photon # Photon Package | - Plugins # Other Unity Plugins | - Prefabs # All prefabs | - Presets # Editor presets | - Rendering # Rendering-related assets | - Resources # Special Resources folder | - Scenes # All game scenes | - Scripts # All C# scripts | - Sounds # All SFX + BGM sound assets | - TextMesh Pro # Text rendering package | - Textures # All textures Most of these folders contain various assets that are used within the game, such as 3D models, 2D art, and sound. The below sections will highlight some of the key folders to be familiar with.","title":"Code Structure"},{"location":"bitterbuster/implementation/#scenes","text":"Each \"level\" within Unity is captured within a Scene . For BitterBuster, there are three main scenes: StartScreen: The first scene when a user opens the game, provides options to host, join, or quit the game. PreGame: The setup scene after a player joins or creates a room. This is where hosts update the settings of the game and players can select their role of Selector or Explorer. Game: The main game scene. This contains the entire Candy Kingdom world along with all of the components of the gameplay. To edit a particular Scene , double-click its corresponding file in this folder.","title":"Scenes"},{"location":"bitterbuster/implementation/#resources","text":"The Resources folder is a special folder in Unity that allows for runtime loading of assets. It contains prefabs used by Photon to create multiplayer instances of during runtime (such as the player objects), along with default Bitter/Sweet candies that are loaded at runtime as well.","title":"Resources"},{"location":"bitterbuster/implementation/#scripts","text":"All of the code within the game is located in this folder. Each of the code files is also separated into more specific directories based on functionality: Scripts | - Controllers # GameObject controller scripts | - Logging # Logging-related scripts | | - LogEvents # Defined log events | - SceneManagers # Scene manager scripts | - Sound # Sound-related scripts | - UI # UI-related scripts | | - Components # Subset of scripts for specific UI components | - Util # General utility scripts","title":"Scripts"},{"location":"bitterbuster/implementation/#controllers","text":"Each of the scripts in this directory relate to a key GameObject used in the main game - for instance, controllers for the Explorer, for traps, for houses, etc. Each instance of this object will contain the corresponding controller script as a component, which will contain common functionalities and parameters for the object.","title":"Controllers"},{"location":"bitterbuster/implementation/#logging","text":"All logging-related logic is contained in this folder. This consists of the overall Logger that is used by the host along with all of the different events that the Logger will log.","title":"Logging"},{"location":"bitterbuster/implementation/#scenemanagers","text":"Each scene in BitterBuster has a corresponding manager class, which handles the overall logic of that given scene. The GameManager class is the most important script in this folder as it contains all of the overarching logic for the main game. This includes handling game events by broadcasting them to all machines. An additional class defined in this directory is the EventManager class, which is used in the main game to broadcast and add/remove listeners to all gameplay events.","title":"SceneManagers"},{"location":"bitterbuster/implementation/#sound","text":"This directory contains managers and related scripts for SFX and BGM used in the game.","title":"Sound"},{"location":"bitterbuster/implementation/#ui","text":"This directory contains managers and related scripts for all of the UI used in the game.","title":"UI"},{"location":"bitterbuster/implementation/#util","text":"This directory contains utility scripts used in the game. Some key ones to note are: - Candy.cs: Contains definitions for Candy fields and other related classes, such as a CandyLoader . - FileSelector.cs: Contains wrapper functions for a file selector plugin that allows for runtime usage of a local file selector. This is currently used to upload JSON files, candies, etc. - RoomCustomProperties.cs: Allows for access and storage of room-based properties, such as the global game settings and Explorer/Selector ID. This is used to persist values between the PreGame and the Game scenes.","title":"Util"},{"location":"bitterbuster/implementation/#multiplayer-structure","text":"For more details, Photon provides a documentation wiki describing how their many functionalities work. To start a multiplayer session , one machine must first create a room with a room code. The creater of the room is considered the MasterClient . This room code can then be used by other machines to join the same room. If the MasterClient disconnects, one of the other players will then become the MasterClient ; if there are no other players in the room, it is shut down. When using Photon with Unity, all GameObjects are instantiated locally, and all function calls will only affect the local objects. In order to make cross-machine calls, we use Remote Procedure Calls (RPCs) . This will be what we make use of throughout the game to synchronize core game events between the different machines.","title":"Multiplayer Structure"},{"location":"bitterbuster/implementation/#general-game-flow","text":"The following sections provide a general overview of what happens behind-the-scenes in a given play session.","title":"General Game Flow"},{"location":"bitterbuster/implementation/#start-scene","text":"On the start screen, a player can select whether they would like to host or join the game. In clicking the button, the game will prompt them for a game code, then create or join the room respectively depending on which option they pick. Here, a host status is determined by setting the playerType field of the Player class to be Host . This value persists onto future scenes. From Photon's perspective, this host is also the MasterClient .","title":"Start Scene"},{"location":"bitterbuster/implementation/#pregame-scene","text":"Once a host has created a game, they are led to the pre-game screen: Here, they can also access the settings for the game: The host can then use this screen to upload any gameplay settings through the JSON configuration file. This value is stored using Photon's support for room-based custom properties, of which the main functions are wrapped in the RoomCustomProperties class. From a player perspective who has joined the room, they can select their role on the pre-game screen: This updates the playerType in the Player class to whichever they select, along with storing the user ID within the RoomCustomProperties class. Both values will persist into the main game scene; the former will be used for most of the gameplay, and the latter is used to ensure exclusivity of role selection (i.e. making sure we don't let both players choose the same role) and to handle player disconnects. Once two players have joined and selected their roles, the host can click a button to start the game.","title":"PreGame Scene"},{"location":"bitterbuster/implementation/#main-game","text":"","title":"Main Game"},{"location":"bitterbuster/implementation/#initialization","text":"Upon entering the game, there are a number of items that are immediately processed behind the scenes. Firstly, in using the playerType field, many objects will initialize/destory themselves based on what the local player's role is. For instance, the Selector will only see the Selector UI; houses will only initialize their own mailbox colors on the Explorer side; only the Host will be able to toggle between the two cameras; and so on. The Host also will do some additional setup, such as loading the Candies. Because Candy images are only configurable on the Host side, only the Host will upload and store the images, and most future communication about Candies will be through passing their corresponding ID numbers around; only when the Candy really needs to be displayed (i.e. for the Selector's selection process) will the actual image bytes be passed along. The two players are presented with their respective onboarding screens (which will differ depending on the player's roles), and then can start the game together.","title":"Initialization"},{"location":"bitterbuster/implementation/#main-loop","text":"Afterwards, the two players enter the main gameplay loop. Some aspects, such as the Explorer's position and rotation, are values that are automatically synced by Photon. Otherwise, the general gameplay loop will result in the following: Player performs an action (visits a house, clicks a button), which causes some local changes Action communicates with the GameManager through making a call GameManager.Instance.Broadcast...(...) The GameManager function will call a corresponding RPC function on each machine The RPC function will locally broadcast the GameEvent Any listeners to the broadcasted event will respond accordingly This continues until time runs out and a game over state is triggered in the GameManager .","title":"Main Loop"},{"location":"bitterbuster/installation/","text":"BitterBuster Installation Overview This document provides the details on how to install and set up a development environment for BitterBuster. Setup Repository Link https://github.com/ETCF22-HAI/BitterBuster Tech Requirements Unity The majority of the BitterBuster code is developed in C# within the Unity game engine version 2021.3.9f1. Unity provides download instructions for Unity Hub and the Editor itself; the specific version used for this project can be found here . It is recommended to modify Unity files using the Visual Studio IDE. PUN Multiplayer is implemented using Photon PUN . Currently, this project is being developed using the free tier offered by Photon, which allows for 20 CCU. Should the project be expanded in the future, higher tiers may need to be purchased to account for a larger user base. Photon provides extensive documentation on its many features. The package needed to integrate PUN with Unity has already been installed but is currently being used with a development PUN ID belonging to the HAI team; a new ID and account should be made to set up the game for the research team. You can follow the setup tutorial provided here . ParrelSync To test multiplayer development within the Unity editor, we use the ParrelSync plugin. This has already been installed via the package manager. Installation Steps Download and install Unity Hub and Unity Editor version 2021.3.9f1 . When downloading the Editor, ensure that you add modules for all the platforms you wish to build for (usually, this includes WebGL, Windows, Linux, and Mac) Clone the BitterBuster repository locally Open Unity Hub -> Projects -> Open -> Select the BitterBuster project folder Development Setup Multiplayer Setup To help support local multiplayer development, this project makes use of the ParrelSync plugin to create auto-syncing clones of the editor. Note: Testing three editor instances of the game on a single computer can be very CPU-intensive and definitely not recommended for laptops or weaker desktops; another alternative is using builds to join the game and fill in for the other roles. In the tabs at the top of the window, select ParrelSync -> Clones Manager Click on the \"Add new clone\" button twice to create two clones To open the cloned instances, click on the \"Open in New Editor\" buttons While testing in the Unity Editor, you can click the \"Run\" play button on each editor and create/join rooms on each editor instance Util Functions In Unity, clicking on the \"Run\" button will start running the game from the currently open scene. However, as most development happens in the \"Game\" scene, it becomes bothersome to manually swap scenes before running. As a shortcut, you can click on Util -> Set Starting Scene to automatically set the default starting scene to the \"StartScreen\" scene. This will need to be clicked once every time the editor is first opened. Play Mode To run a Unity game in the Editor, click on the Play button at the top of the window. This will automatically direct you to the game mode screen. All of the UI was built for a 16:9 aspect ratio. You can use the dropdown at the top of the game screen to adjust the screen ratio.","title":"Installation"},{"location":"bitterbuster/installation/#bitterbuster-installation","text":"","title":"BitterBuster Installation"},{"location":"bitterbuster/installation/#overview","text":"This document provides the details on how to install and set up a development environment for BitterBuster.","title":"Overview"},{"location":"bitterbuster/installation/#setup","text":"","title":"Setup"},{"location":"bitterbuster/installation/#repository-link","text":"https://github.com/ETCF22-HAI/BitterBuster","title":"Repository Link"},{"location":"bitterbuster/installation/#tech-requirements","text":"","title":"Tech Requirements"},{"location":"bitterbuster/installation/#unity","text":"The majority of the BitterBuster code is developed in C# within the Unity game engine version 2021.3.9f1. Unity provides download instructions for Unity Hub and the Editor itself; the specific version used for this project can be found here . It is recommended to modify Unity files using the Visual Studio IDE.","title":"Unity"},{"location":"bitterbuster/installation/#pun","text":"Multiplayer is implemented using Photon PUN . Currently, this project is being developed using the free tier offered by Photon, which allows for 20 CCU. Should the project be expanded in the future, higher tiers may need to be purchased to account for a larger user base. Photon provides extensive documentation on its many features. The package needed to integrate PUN with Unity has already been installed but is currently being used with a development PUN ID belonging to the HAI team; a new ID and account should be made to set up the game for the research team. You can follow the setup tutorial provided here .","title":"PUN"},{"location":"bitterbuster/installation/#parrelsync","text":"To test multiplayer development within the Unity editor, we use the ParrelSync plugin. This has already been installed via the package manager.","title":"ParrelSync"},{"location":"bitterbuster/installation/#installation-steps","text":"Download and install Unity Hub and Unity Editor version 2021.3.9f1 . When downloading the Editor, ensure that you add modules for all the platforms you wish to build for (usually, this includes WebGL, Windows, Linux, and Mac) Clone the BitterBuster repository locally Open Unity Hub -> Projects -> Open -> Select the BitterBuster project folder","title":"Installation Steps"},{"location":"bitterbuster/installation/#development-setup","text":"","title":"Development Setup"},{"location":"bitterbuster/installation/#multiplayer-setup","text":"To help support local multiplayer development, this project makes use of the ParrelSync plugin to create auto-syncing clones of the editor. Note: Testing three editor instances of the game on a single computer can be very CPU-intensive and definitely not recommended for laptops or weaker desktops; another alternative is using builds to join the game and fill in for the other roles. In the tabs at the top of the window, select ParrelSync -> Clones Manager Click on the \"Add new clone\" button twice to create two clones To open the cloned instances, click on the \"Open in New Editor\" buttons While testing in the Unity Editor, you can click the \"Run\" play button on each editor and create/join rooms on each editor instance","title":"Multiplayer Setup"},{"location":"bitterbuster/installation/#util-functions","text":"In Unity, clicking on the \"Run\" button will start running the game from the currently open scene. However, as most development happens in the \"Game\" scene, it becomes bothersome to manually swap scenes before running. As a shortcut, you can click on Util -> Set Starting Scene to automatically set the default starting scene to the \"StartScreen\" scene. This will need to be clicked once every time the editor is first opened.","title":"Util Functions"},{"location":"bitterbuster/installation/#play-mode","text":"To run a Unity game in the Editor, click on the Play button at the top of the window. This will automatically direct you to the game mode screen. All of the UI was built for a 16:9 aspect ratio. You can use the dropdown at the top of the game screen to adjust the screen ratio.","title":"Play Mode"},{"location":"bitterbuster/data/ai/","text":"BitterBuster AI Support Overview This document provides the details and schema for the various data elements that will be exported/expected as input for AI agent support by the BitterBuster game. Game State Data [WIP] The game state data is created through compiling all of serializable data from the different objects in the game. Each of these objects have a Serialize function that converts their fields into a JSON format, then all of the serialized data is compiled by the GameManager . The rough schema of what would be outputted is as follows: { \"observation\": { \"explorer\": { \"position\": Vector3, \"scale\": Vector3, \"rotation\": Vector4, // Quaternion \"allowPlayerInput\": bool, // NOT NEEDED: express through actions array \"canInteract\": bool // NOT NEEDED: express through actions array }, \"selector\": { \"position\": Vector3, \"allowPlayerInput\": bool, // NOT NEEDED: express through actions array // TODO: when selector is in selection mode \"candyImg\": byte[] }, \"neighborhoodData\": [ { \"houseData\": [ { \"position\": Vector3, \"scale\": Vector3, \"rotation\": Vector4, // Quaternion \"visited\": bool, \"mailboxColor\": Vector4 }, ... ], \"numBitterCorrect\": int, \"numBitterIncorrect\": int }, ... ], \"barrierData\": [ { \"position\": Vector3, \"scale\": Vector3, \"rotation\": Vector4, // Quaternion }, ... ], \"trapData\": [ { \"position\": Vector3, \"scale\": Vector3, \"rotation\": Vector4, // Quaternion }, ... ], \"timeLeft\": float, \"scoring\": { \"numBitterCorrect\": int, \"numBitterIncorrect\": int, \"numSweetCorrect\": int, \"numSweetIncorrect\": int } }, \"actions\": int[] // Array of possible actions that can be taken } Many parts of the above are static (barrier, house, and trap positions). These can be exported once at the beginning, then not needed again. For houses, we can export positions once, associate them with IDs, then only need to continuously output the ID and whether or not a house has been visited. Screenshot Screenshots can be captured for the game (which uses a 16:9 ratio). The size of the screenshot can be adjusted within Unity via the CameraController class.","title":"AI Support [WIP]"},{"location":"bitterbuster/data/ai/#bitterbuster-ai-support","text":"","title":"BitterBuster AI Support"},{"location":"bitterbuster/data/ai/#overview","text":"This document provides the details and schema for the various data elements that will be exported/expected as input for AI agent support by the BitterBuster game.","title":"Overview"},{"location":"bitterbuster/data/ai/#game-state-data-wip","text":"The game state data is created through compiling all of serializable data from the different objects in the game. Each of these objects have a Serialize function that converts their fields into a JSON format, then all of the serialized data is compiled by the GameManager . The rough schema of what would be outputted is as follows: { \"observation\": { \"explorer\": { \"position\": Vector3, \"scale\": Vector3, \"rotation\": Vector4, // Quaternion \"allowPlayerInput\": bool, // NOT NEEDED: express through actions array \"canInteract\": bool // NOT NEEDED: express through actions array }, \"selector\": { \"position\": Vector3, \"allowPlayerInput\": bool, // NOT NEEDED: express through actions array // TODO: when selector is in selection mode \"candyImg\": byte[] }, \"neighborhoodData\": [ { \"houseData\": [ { \"position\": Vector3, \"scale\": Vector3, \"rotation\": Vector4, // Quaternion \"visited\": bool, \"mailboxColor\": Vector4 }, ... ], \"numBitterCorrect\": int, \"numBitterIncorrect\": int }, ... ], \"barrierData\": [ { \"position\": Vector3, \"scale\": Vector3, \"rotation\": Vector4, // Quaternion }, ... ], \"trapData\": [ { \"position\": Vector3, \"scale\": Vector3, \"rotation\": Vector4, // Quaternion }, ... ], \"timeLeft\": float, \"scoring\": { \"numBitterCorrect\": int, \"numBitterIncorrect\": int, \"numSweetCorrect\": int, \"numSweetIncorrect\": int } }, \"actions\": int[] // Array of possible actions that can be taken } Many parts of the above are static (barrier, house, and trap positions). These can be exported once at the beginning, then not needed again. For houses, we can export positions once, associate them with IDs, then only need to continuously output the ID and whether or not a house has been visited.","title":"Game State Data [WIP]"},{"location":"bitterbuster/data/ai/#screenshot","text":"Screenshots can be captured for the game (which uses a 16:9 ratio). The size of the screenshot can be adjusted within Unity via the CameraController class.","title":"Screenshot"},{"location":"bitterbuster/data/config/","text":"BitterBuster Configuration Data Overview This document provides the details and schema for the configuration file that can be used to configure the BitterBuster game. Configuration File Details A JSON file can be used to configure various parts of the game - i.e. the bitterness distribution of each neighborhood, game round time, etc. This should make it easier to upload settings for the game rather than having to fill out a settings page or rebuild the game. Below is a sample configuration file and the default values of each. { \"showVisualMemory\": false, // Toggle for visual memory on the selector \"sourBitterProb\": -1.0f, // Bitterness probability for the sour neighborhood \"dessertBitterProb\": -1.0f, // Bitterness probability for the dessert neighborhood \"giftBitterProb\": -1.0f, // Bitterness probability for the gift neighborhood \"partyBitterProb\": -1.0f, // Bitterness probability for the party neighborhood \"explorerPosPingInterval\": 2.0f, // Interval in seconds at which the explorer's position will be logged } Parameter Notes For each of the neighborhood bitterness probability, a value between [0, 1] is expected. If a value outside of this range is provided, then the bitterness probability for this neighborhood will be randomly generated. Game time is pulled out to its own input box in the settings configuration page as it's most likely to be changed more frequently.","title":"Game Configuration"},{"location":"bitterbuster/data/config/#bitterbuster-configuration-data","text":"","title":"BitterBuster Configuration Data"},{"location":"bitterbuster/data/config/#overview","text":"This document provides the details and schema for the configuration file that can be used to configure the BitterBuster game.","title":"Overview"},{"location":"bitterbuster/data/config/#configuration-file-details","text":"A JSON file can be used to configure various parts of the game - i.e. the bitterness distribution of each neighborhood, game round time, etc. This should make it easier to upload settings for the game rather than having to fill out a settings page or rebuild the game. Below is a sample configuration file and the default values of each. { \"showVisualMemory\": false, // Toggle for visual memory on the selector \"sourBitterProb\": -1.0f, // Bitterness probability for the sour neighborhood \"dessertBitterProb\": -1.0f, // Bitterness probability for the dessert neighborhood \"giftBitterProb\": -1.0f, // Bitterness probability for the gift neighborhood \"partyBitterProb\": -1.0f, // Bitterness probability for the party neighborhood \"explorerPosPingInterval\": 2.0f, // Interval in seconds at which the explorer's position will be logged }","title":"Configuration File Details"},{"location":"bitterbuster/data/config/#parameter-notes","text":"For each of the neighborhood bitterness probability, a value between [0, 1] is expected. If a value outside of this range is provided, then the bitterness probability for this neighborhood will be randomly generated. Game time is pulled out to its own input box in the settings configuration page as it's most likely to be changed more frequently.","title":"Parameter Notes"},{"location":"bitterbuster/data/logging/","text":"BitterBuster Logging Data Overview This document provides the details and schema for the logging data exported by the BitterBuster game. With each run of the game, data points are logged for each specific event that occurs within the gameplay. These are exported into a json file in the Logs directory created at the root working directory of the BitterBuster executable. The event log contains arrays of logging objects that each follow the general form: { \"eventType\": string, \"timeStamp\": float, ... } Each different event is associated with a different set of key/value data pairs that can be parsed for data interpretation. Logging Event Types Explorer Position Logging of Explorer position by the game every x seconds (current build sets this as 2, but this value will be adjustable in the final version) { \"eventType\": \"Explorer Position\", \"timeStamp\": float, \"position\": Vector3 // (x, y, z) position } Explorer Trapped Logging of when the Explorer is trapped in the game { \"eventType\": \"Explorer Trapped\", \"timeStamp\": float } Enter Neighborhood Logging of when the Explorer enters a neighborhood { \"eventType\": \"Enter Neighborhood\", \"timeStamp\": float, \"neighborhoodBitterProb\": float // Probability of bitterness for given neighborhood } Exit Neighborhood Logging of when the Explorer leaves a neighborhood { \"eventType\": \"Exit Neighborhood\", \"timeStamp\": float } Visited House Logging of when the Explorer visits (interacts with) a House. { \"eventType\": \"Visited House\", \"timeStamp\": float, \"houseBitterProb\": float // Probability of bitterness for given house } Selector Shown Candy Logging of when a Candy is displayed to the Selector { \"eventType\": \"Displayed Candy\", \"timeStamp\": float, \"selectedCandy\": string // Name of the png file for the selected candy } Selector Categorize Logging of each decision made by the Selector with a given batch of Candies. { \"eventType\": \"Selector Categorize\", \"timeStamp\": float, \"selectedCandyCategory\": string, // \"Bitter\" or \"Sweet\" \"actualCandyCategory\": string // \"Bitter\" or \"Sweet\" } Selector Finish Logging of when Selector finishes with their selection task for the current batch. { \"eventType\": \"Selector Finish\", \"timeStamp\": float } Marker Placed Logging of when the Selector places a marker. { \"eventType\": \"Marker Placed\", \"timeStamp\": float, \"markerPos\": Vector3 // (x, y, z) position of marker } Marker Reached Logging of when the Explorer reaches a marker. { \"eventType\": \"Marker Reached\", \"timeStamp\": float } Request to Leave Logging of when either player makes a request to leave. { \"eventType\": \"Requested to Leave\", \"timeStamp\": float, \"playerType\": string // \"Explorer\" or \"Selector\" } Leave Response Logging of when either player responds to a request to leave. { \"eventType\": \"Leave Response\", \"timeStamp\": float, \"response\": string // \"Accept\" or \"Deny\" } Game Summary Logging of stats at the end of a game. { \"eventType\": \"Game Summary\", \"timeStamp\": float, \"numBitterCorrect\": int, \"numBitterIncorrect\": int, \"numSweetCorrect\": int, \"numSweetIncorrect\": int }","title":"Logging Data"},{"location":"bitterbuster/data/logging/#bitterbuster-logging-data","text":"","title":"BitterBuster Logging Data"},{"location":"bitterbuster/data/logging/#overview","text":"This document provides the details and schema for the logging data exported by the BitterBuster game. With each run of the game, data points are logged for each specific event that occurs within the gameplay. These are exported into a json file in the Logs directory created at the root working directory of the BitterBuster executable. The event log contains arrays of logging objects that each follow the general form: { \"eventType\": string, \"timeStamp\": float, ... } Each different event is associated with a different set of key/value data pairs that can be parsed for data interpretation.","title":"Overview"},{"location":"bitterbuster/data/logging/#logging-event-types","text":"","title":"Logging Event Types"},{"location":"bitterbuster/data/logging/#explorer-position","text":"Logging of Explorer position by the game every x seconds (current build sets this as 2, but this value will be adjustable in the final version) { \"eventType\": \"Explorer Position\", \"timeStamp\": float, \"position\": Vector3 // (x, y, z) position }","title":"Explorer Position"},{"location":"bitterbuster/data/logging/#explorer-trapped","text":"Logging of when the Explorer is trapped in the game { \"eventType\": \"Explorer Trapped\", \"timeStamp\": float }","title":"Explorer Trapped"},{"location":"bitterbuster/data/logging/#enter-neighborhood","text":"Logging of when the Explorer enters a neighborhood { \"eventType\": \"Enter Neighborhood\", \"timeStamp\": float, \"neighborhoodBitterProb\": float // Probability of bitterness for given neighborhood }","title":"Enter Neighborhood"},{"location":"bitterbuster/data/logging/#exit-neighborhood","text":"Logging of when the Explorer leaves a neighborhood { \"eventType\": \"Exit Neighborhood\", \"timeStamp\": float }","title":"Exit Neighborhood"},{"location":"bitterbuster/data/logging/#visited-house","text":"Logging of when the Explorer visits (interacts with) a House. { \"eventType\": \"Visited House\", \"timeStamp\": float, \"houseBitterProb\": float // Probability of bitterness for given house }","title":"Visited House"},{"location":"bitterbuster/data/logging/#selector-shown-candy","text":"Logging of when a Candy is displayed to the Selector { \"eventType\": \"Displayed Candy\", \"timeStamp\": float, \"selectedCandy\": string // Name of the png file for the selected candy }","title":"Selector Shown Candy"},{"location":"bitterbuster/data/logging/#selector-categorize","text":"Logging of each decision made by the Selector with a given batch of Candies. { \"eventType\": \"Selector Categorize\", \"timeStamp\": float, \"selectedCandyCategory\": string, // \"Bitter\" or \"Sweet\" \"actualCandyCategory\": string // \"Bitter\" or \"Sweet\" }","title":"Selector Categorize"},{"location":"bitterbuster/data/logging/#selector-finish","text":"Logging of when Selector finishes with their selection task for the current batch. { \"eventType\": \"Selector Finish\", \"timeStamp\": float }","title":"Selector Finish"},{"location":"bitterbuster/data/logging/#marker-placed","text":"Logging of when the Selector places a marker. { \"eventType\": \"Marker Placed\", \"timeStamp\": float, \"markerPos\": Vector3 // (x, y, z) position of marker }","title":"Marker Placed"},{"location":"bitterbuster/data/logging/#marker-reached","text":"Logging of when the Explorer reaches a marker. { \"eventType\": \"Marker Reached\", \"timeStamp\": float }","title":"Marker Reached"},{"location":"bitterbuster/data/logging/#request-to-leave","text":"Logging of when either player makes a request to leave. { \"eventType\": \"Requested to Leave\", \"timeStamp\": float, \"playerType\": string // \"Explorer\" or \"Selector\" }","title":"Request to Leave"},{"location":"bitterbuster/data/logging/#leave-response","text":"Logging of when either player responds to a request to leave. { \"eventType\": \"Leave Response\", \"timeStamp\": float, \"response\": string // \"Accept\" or \"Deny\" }","title":"Leave Response"},{"location":"bitterbuster/data/logging/#game-summary","text":"Logging of stats at the end of a game. { \"eventType\": \"Game Summary\", \"timeStamp\": float, \"numBitterCorrect\": int, \"numBitterIncorrect\": int, \"numSweetCorrect\": int, \"numSweetIncorrect\": int }","title":"Game Summary"},{"location":"candygenerator/docs/","text":"Candy Generator Documentation Overview This document provides the details on how to set up a development environment for the BitterBuster Candy Generator. Setup Repository Link https://github.com/ETCF22-HAI/CandyGeneration Tech Requirements The candy generator is written in Python 3 . Basic instructions on setting up the development environment and running the given scripts are provided in the repository's README file . Installation Steps Clone the repository locally Set up a Python virtual environment in the root directory % python -m venv venv Activate the virtual environment based on OS Install all the requirements % pip install -r requirements.txt Tutorial Generating Candies Assets for the candies along with a sample generation script generate.py are provided within the repository. This script will generate candies based on the components along with corresponding JSON files describing the attributes/labels of each candy. Some adjustable parameters are provided at the top of the generate.py file. Example Usage To generate all candies: % python generate.py To generate all candies with multiprocessing enabled: % python generate.py -p To generate N candies: % python generate.py -n N To generate N candies while feeding in a particular randomization seed S : % python generate.py -n N -s S Categorizing Candies A sample categorization script categorize.py is provided within the repository. To customize the parameters for determining bitterness, you can update the predicate function is_bitter at the top of the file. For example, to categorize Candies by warm/cold body color where cold corresponds to bitterness: def is_bitter(labels): return labels[\"body\"][\"hue\"] == \"cold\" Categorization will then act upon the generated candies from the generation script by running: % python categorize.py Candy Labels Below is a list of all labels associated with each Candy Component that can be used for categorization: { \"left_arm\": { \"side\": \"left\", \"orientation\": [\"up\", \"down\"] }, \"right_arm\": { \"side\": \"right\", \"orientation\": [\"up\", \"down\"] }, \"body\": { \"hue\": [\"cold\", \"warm\"], \"shape\": [\"sharp\", \"round\", \"mixed\"] }, \"eye\": { \"lash\": [\"lash\", \"nolash\"], \"distance\": [\"narrow\", \"middle\", \"wide\"] }, \"leg\": { \"length\": [\"short\", \"middle\", \"long\"], \"orientation\": [\"inward\", \"left\", \"right\", \"outward\"] }, \"mouth\": { \"openness\": [\"open\", \"close\"] }, \"pattern\": { \"type\": [\"dots\", \"stripes\"] } } Licensing The 2D Candy Components were created by Constanza Tong and scripts were written by Angela Zhang. All licensing information regarding both art assets and source code can be found here .","title":"Documentation"},{"location":"candygenerator/docs/#candy-generator-documentation","text":"","title":"Candy Generator Documentation"},{"location":"candygenerator/docs/#overview","text":"This document provides the details on how to set up a development environment for the BitterBuster Candy Generator.","title":"Overview"},{"location":"candygenerator/docs/#setup","text":"","title":"Setup"},{"location":"candygenerator/docs/#repository-link","text":"https://github.com/ETCF22-HAI/CandyGeneration","title":"Repository Link"},{"location":"candygenerator/docs/#tech-requirements","text":"The candy generator is written in Python 3 . Basic instructions on setting up the development environment and running the given scripts are provided in the repository's README file .","title":"Tech Requirements"},{"location":"candygenerator/docs/#installation-steps","text":"Clone the repository locally Set up a Python virtual environment in the root directory % python -m venv venv Activate the virtual environment based on OS Install all the requirements % pip install -r requirements.txt","title":"Installation Steps"},{"location":"candygenerator/docs/#tutorial","text":"","title":"Tutorial"},{"location":"candygenerator/docs/#generating-candies","text":"Assets for the candies along with a sample generation script generate.py are provided within the repository. This script will generate candies based on the components along with corresponding JSON files describing the attributes/labels of each candy. Some adjustable parameters are provided at the top of the generate.py file.","title":"Generating Candies"},{"location":"candygenerator/docs/#example-usage","text":"To generate all candies: % python generate.py To generate all candies with multiprocessing enabled: % python generate.py -p To generate N candies: % python generate.py -n N To generate N candies while feeding in a particular randomization seed S : % python generate.py -n N -s S","title":"Example Usage"},{"location":"candygenerator/docs/#categorizing-candies","text":"A sample categorization script categorize.py is provided within the repository. To customize the parameters for determining bitterness, you can update the predicate function is_bitter at the top of the file. For example, to categorize Candies by warm/cold body color where cold corresponds to bitterness: def is_bitter(labels): return labels[\"body\"][\"hue\"] == \"cold\" Categorization will then act upon the generated candies from the generation script by running: % python categorize.py","title":"Categorizing Candies"},{"location":"candygenerator/docs/#candy-labels","text":"Below is a list of all labels associated with each Candy Component that can be used for categorization: { \"left_arm\": { \"side\": \"left\", \"orientation\": [\"up\", \"down\"] }, \"right_arm\": { \"side\": \"right\", \"orientation\": [\"up\", \"down\"] }, \"body\": { \"hue\": [\"cold\", \"warm\"], \"shape\": [\"sharp\", \"round\", \"mixed\"] }, \"eye\": { \"lash\": [\"lash\", \"nolash\"], \"distance\": [\"narrow\", \"middle\", \"wide\"] }, \"leg\": { \"length\": [\"short\", \"middle\", \"long\"], \"orientation\": [\"inward\", \"left\", \"right\", \"outward\"] }, \"mouth\": { \"openness\": [\"open\", \"close\"] }, \"pattern\": { \"type\": [\"dots\", \"stripes\"] } }","title":"Candy Labels"},{"location":"candygenerator/docs/#licensing","text":"The 2D Candy Components were created by Constanza Tong and scripts were written by Angela Zhang. All licensing information regarding both art assets and source code can be found here .","title":"Licensing"}]}